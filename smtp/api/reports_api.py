# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from smtp.api_client import ApiClient
from smtp.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ReportsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v4_reports_get(self, **kwargs):  # noqa: E501
        """Get All Reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Reports
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_reports_get_with_http_info(**kwargs)  # noqa: E501

    def v4_reports_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Reports, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_reports_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiID', 'apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v4/reports/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Reports',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v4_reports_ondemand_post(self, start, **kwargs):  # noqa: E501
        """Create On-Demand Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_ondemand_post(start, async_req=True)
        >>> result = thread.get()

        :param start: Start date/time of the report in RFC 2822 or UNIX epoch format (required)
        :type start: int
        :param channel: Name of the channel for which a given report has been defined
        :type channel: str
        :param type: Type or report format. If not specified defaults to “csv” - currently the only supported type
        :type type: str
        :param end: End date/time of the report in RFC 2822 or UNIX epoch format (default - now)
        :type end: str
        :param domain: Filter by the “from” domain of emails
        :type domain: str
        :param rcpt_domain: Filter by the “to” domain of emails
        :type rcpt_domain: str
        :param events: Filter by event type. Valid event are:  * hard_bounced - just hard bounces * failed - all failed messages, i.e. hard_bounced + the rest of failed * delivered - delivered messages * sent - delivered+failed (default events value) * pending - pending messages * total - all messages, i.e. sent+pending * abuse - spam complaints 
        :type events: str
        :param columns: Array of columns to be specified in the report. These can differ based on any specified event type filter.   Possible column values for all reports are: * `message_id` - Unique message ID * from - From Address * to - Recipient Address * time_rcv - Date Received in RFC 2822 or UNIX epoch format * time_snt - Date Delivered in RFC 2822 or UNIX epoch format * channel - Name of a channel  Additional column values for message reports (hard_bounced, failed, delivered, total) include: * status - Status of delivery * code - SMTP Response Code * message - SMTP Response message * tries - Amount of re-tries (deferred states before final)  Additional column values for spam reports include:  * report_time - Date when an abuse complaint has been reported, RFC 2822 or UNIX epoch format * subject - Email Subject  Additional column values for pending reports include:  * status - Current email status  If not specified all relevant columns are included. 
        :type columns: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatusResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_reports_ondemand_post_with_http_info(start, **kwargs)  # noqa: E501

    def v4_reports_ondemand_post_with_http_info(self, start, **kwargs):  # noqa: E501
        """Create On-Demand Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_ondemand_post_with_http_info(start, async_req=True)
        >>> result = thread.get()

        :param start: Start date/time of the report in RFC 2822 or UNIX epoch format (required)
        :type start: int
        :param channel: Name of the channel for which a given report has been defined
        :type channel: str
        :param type: Type or report format. If not specified defaults to “csv” - currently the only supported type
        :type type: str
        :param end: End date/time of the report in RFC 2822 or UNIX epoch format (default - now)
        :type end: str
        :param domain: Filter by the “from” domain of emails
        :type domain: str
        :param rcpt_domain: Filter by the “to” domain of emails
        :type rcpt_domain: str
        :param events: Filter by event type. Valid event are:  * hard_bounced - just hard bounces * failed - all failed messages, i.e. hard_bounced + the rest of failed * delivered - delivered messages * sent - delivered+failed (default events value) * pending - pending messages * total - all messages, i.e. sent+pending * abuse - spam complaints 
        :type events: str
        :param columns: Array of columns to be specified in the report. These can differ based on any specified event type filter.   Possible column values for all reports are: * `message_id` - Unique message ID * from - From Address * to - Recipient Address * time_rcv - Date Received in RFC 2822 or UNIX epoch format * time_snt - Date Delivered in RFC 2822 or UNIX epoch format * channel - Name of a channel  Additional column values for message reports (hard_bounced, failed, delivered, total) include: * status - Status of delivery * code - SMTP Response Code * message - SMTP Response message * tries - Amount of re-tries (deferred states before final)  Additional column values for spam reports include:  * report_time - Date when an abuse complaint has been reported, RFC 2822 or UNIX epoch format * subject - Email Subject  Additional column values for pending reports include:  * status - Current email status  If not specified all relevant columns are included. 
        :type columns: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatusResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'start',
            'channel',
            'type',
            'end',
            'domain',
            'rcpt_domain',
            'events',
            'columns'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_reports_ondemand_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'start' is set
        if self.api_client.client_side_validation and ('start' not in local_var_params or  # noqa: E501
                                                        local_var_params['start'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start` when calling `v4_reports_ondemand_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel' in local_var_params and local_var_params['channel'] is not None:  # noqa: E501
            query_params.append(('channel', local_var_params['channel']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'start' in local_var_params and local_var_params['start'] is not None:  # noqa: E501
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'end' in local_var_params and local_var_params['end'] is not None:  # noqa: E501
            query_params.append(('end', local_var_params['end']))  # noqa: E501
        if 'domain' in local_var_params and local_var_params['domain'] is not None:  # noqa: E501
            query_params.append(('domain', local_var_params['domain']))  # noqa: E501
        if 'rcpt_domain' in local_var_params and local_var_params['rcpt_domain'] is not None:  # noqa: E501
            query_params.append(('rcpt_domain', local_var_params['rcpt_domain']))  # noqa: E501
        if 'events' in local_var_params and local_var_params['events'] is not None:  # noqa: E501
            query_params.append(('events', local_var_params['events']))  # noqa: E501
        if 'columns' in local_var_params and local_var_params['columns'] is not None:  # noqa: E501
            query_params.append(('columns', local_var_params['columns']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiID', 'apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v4/reports/ondemand', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v4_reports_periodic_post(self, frequency, report_time, **kwargs):  # noqa: E501
        """Create Periodic Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_periodic_post(frequency, report_time, async_req=True)
        >>> result = thread.get()

        :param frequency: Report frequency – one of:   * daily - every day at a specified hour   * weekly  - Mondays at a specified hour   * monthly - 1st day of the month at a specified hour  (required)
        :type frequency: str
        :param report_time: The hour at which the report should be sent. Value values range from 0 to 23 (required)
        :type report_time: int
        :param channel: Name of the channel for which a given report has been defined
        :type channel: str
        :param notify_method: Notification method to be used when report is completed and can be downloaded
        :type notify_method: str
        :param notify_dest: A valid URL which will accept the report completion notification. The payload will be ```   {\"message\": \"success\", \"id\": string} ``` where `id` is a Unique report ID 
        :type notify_dest: str
        :param domain: Filter by the “From” domain of emails
        :type domain: str
        :param rcpt_domain: Filter by the “To” domain of emails
        :type rcpt_domain: str
        :param events: Filter by event type. Valid event are:  * hard_bounced - just hard bounces * failed - all failed messages, i.e. hard_bounced + the rest of failed * delivered - delivered messages * sent - delivered+failed (default events value) * pending - pending messages * total - all messages, i.e. sent+pending * abuse - spam complaints 
        :type events: str
        :param columns: Array of columns to be specified in the report. These can differ based on any specified event type filter.   Possible column values are: * `message_id` - Unique message ID * from - From Address * to - Recipient Address * time_rcv - Date Received in RFC 2822 or UNIX epoch format * time_snt - Date Delivered in RFC 2822 or UNIX epoch format * channel - Name of a channel  Additional column values for message reports (hard_bounced, failed, delivered, total) include: * status - Status of delivery * code - SMTP Response Code * message - SMTP Response message * tries - Amount of re-tries (deferred states before final)  Additional column values for spam reports include:  * report_time - Date when an abuse complaint has been reported, RFC 2822 or UNIX epoch format * subject - Email Subject  Additional column values for pending reports include:  * status - Current email status  If not specified all relevant columns are included. 
        :type columns: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatusResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_reports_periodic_post_with_http_info(frequency, report_time, **kwargs)  # noqa: E501

    def v4_reports_periodic_post_with_http_info(self, frequency, report_time, **kwargs):  # noqa: E501
        """Create Periodic Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_periodic_post_with_http_info(frequency, report_time, async_req=True)
        >>> result = thread.get()

        :param frequency: Report frequency – one of:   * daily - every day at a specified hour   * weekly  - Mondays at a specified hour   * monthly - 1st day of the month at a specified hour  (required)
        :type frequency: str
        :param report_time: The hour at which the report should be sent. Value values range from 0 to 23 (required)
        :type report_time: int
        :param channel: Name of the channel for which a given report has been defined
        :type channel: str
        :param notify_method: Notification method to be used when report is completed and can be downloaded
        :type notify_method: str
        :param notify_dest: A valid URL which will accept the report completion notification. The payload will be ```   {\"message\": \"success\", \"id\": string} ``` where `id` is a Unique report ID 
        :type notify_dest: str
        :param domain: Filter by the “From” domain of emails
        :type domain: str
        :param rcpt_domain: Filter by the “To” domain of emails
        :type rcpt_domain: str
        :param events: Filter by event type. Valid event are:  * hard_bounced - just hard bounces * failed - all failed messages, i.e. hard_bounced + the rest of failed * delivered - delivered messages * sent - delivered+failed (default events value) * pending - pending messages * total - all messages, i.e. sent+pending * abuse - spam complaints 
        :type events: str
        :param columns: Array of columns to be specified in the report. These can differ based on any specified event type filter.   Possible column values are: * `message_id` - Unique message ID * from - From Address * to - Recipient Address * time_rcv - Date Received in RFC 2822 or UNIX epoch format * time_snt - Date Delivered in RFC 2822 or UNIX epoch format * channel - Name of a channel  Additional column values for message reports (hard_bounced, failed, delivered, total) include: * status - Status of delivery * code - SMTP Response Code * message - SMTP Response message * tries - Amount of re-tries (deferred states before final)  Additional column values for spam reports include:  * report_time - Date when an abuse complaint has been reported, RFC 2822 or UNIX epoch format * subject - Email Subject  Additional column values for pending reports include:  * status - Current email status  If not specified all relevant columns are included. 
        :type columns: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatusResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'frequency',
            'report_time',
            'channel',
            'notify_method',
            'notify_dest',
            'domain',
            'rcpt_domain',
            'events',
            'columns'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_reports_periodic_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'frequency' is set
        if self.api_client.client_side_validation and ('frequency' not in local_var_params or  # noqa: E501
                                                        local_var_params['frequency'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `frequency` when calling `v4_reports_periodic_post`")  # noqa: E501
        # verify the required parameter 'report_time' is set
        if self.api_client.client_side_validation and ('report_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['report_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `report_time` when calling `v4_reports_periodic_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'frequency' in local_var_params and local_var_params['frequency'] is not None:  # noqa: E501
            query_params.append(('frequency', local_var_params['frequency']))  # noqa: E501
        if 'report_time' in local_var_params and local_var_params['report_time'] is not None:  # noqa: E501
            query_params.append(('report_time', local_var_params['report_time']))  # noqa: E501
        if 'channel' in local_var_params and local_var_params['channel'] is not None:  # noqa: E501
            query_params.append(('channel', local_var_params['channel']))  # noqa: E501
        if 'notify_method' in local_var_params and local_var_params['notify_method'] is not None:  # noqa: E501
            query_params.append(('notify_method', local_var_params['notify_method']))  # noqa: E501
        if 'notify_dest' in local_var_params and local_var_params['notify_dest'] is not None:  # noqa: E501
            query_params.append(('notify_dest', local_var_params['notify_dest']))  # noqa: E501
        if 'domain' in local_var_params and local_var_params['domain'] is not None:  # noqa: E501
            query_params.append(('domain', local_var_params['domain']))  # noqa: E501
        if 'rcpt_domain' in local_var_params and local_var_params['rcpt_domain'] is not None:  # noqa: E501
            query_params.append(('rcpt_domain', local_var_params['rcpt_domain']))  # noqa: E501
        if 'events' in local_var_params and local_var_params['events'] is not None:  # noqa: E501
            query_params.append(('events', local_var_params['events']))  # noqa: E501
        if 'columns' in local_var_params and local_var_params['columns'] is not None:  # noqa: E501
            query_params.append(('columns', local_var_params['columns']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiID', 'apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v4/reports/periodic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v4_reports_periodic_report_id_delete(self, report_id, **kwargs):  # noqa: E501
        """Delete a Periodic Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_periodic_report_id_delete(report_id, async_req=True)
        >>> result = thread.get()

        :param report_id: Id of a given report (required)
        :type report_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatusResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_reports_periodic_report_id_delete_with_http_info(report_id, **kwargs)  # noqa: E501

    def v4_reports_periodic_report_id_delete_with_http_info(self, report_id, **kwargs):  # noqa: E501
        """Delete a Periodic Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_periodic_report_id_delete_with_http_info(report_id, async_req=True)
        >>> result = thread.get()

        :param report_id: Id of a given report (required)
        :type report_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatusResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'report_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_reports_periodic_report_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_id' is set
        if self.api_client.client_side_validation and ('report_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['report_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `report_id` when calling `v4_reports_periodic_report_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_id' in local_var_params:
            path_params['report_id'] = local_var_params['report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiID', 'apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v4/reports/periodic/{report_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v4_reports_periodic_report_id_patch(self, report_id, frequency, report_time, **kwargs):  # noqa: E501
        """Update Periodic Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_periodic_report_id_patch(report_id, frequency, report_time, async_req=True)
        >>> result = thread.get()

        :param report_id: Id of the report to be updated (required)
        :type report_id: str
        :param frequency: Report frequency – one of:  * daily - every day at a specified hour  * weekly  - Mondays at a specified hour  * monthly - first day of the month at a specified hour.  (required)
        :type frequency: str
        :param report_time: The hour at which the report should be sent. Value values range from 0 to 23 (required)
        :type report_time: int
        :param channel: Name of channel (sender). If not specified all channels will be reported
        :type channel: str
        :param events: Filter by event type. Valid event are: * hard_bounced - just hard bounces * failed - all failed messages, i.e. hard_bounced + the rest of failed * delivered - delivered messages * sent - delivered+failed (default events value) * pending - pending messages * total - all messages, i.e. sent+pending * abuse - spam complaints  If not specified all events are included. 
        :type events: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatusResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_reports_periodic_report_id_patch_with_http_info(report_id, frequency, report_time, **kwargs)  # noqa: E501

    def v4_reports_periodic_report_id_patch_with_http_info(self, report_id, frequency, report_time, **kwargs):  # noqa: E501
        """Update Periodic Report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_periodic_report_id_patch_with_http_info(report_id, frequency, report_time, async_req=True)
        >>> result = thread.get()

        :param report_id: Id of the report to be updated (required)
        :type report_id: str
        :param frequency: Report frequency – one of:  * daily - every day at a specified hour  * weekly  - Mondays at a specified hour  * monthly - first day of the month at a specified hour.  (required)
        :type frequency: str
        :param report_time: The hour at which the report should be sent. Value values range from 0 to 23 (required)
        :type report_time: int
        :param channel: Name of channel (sender). If not specified all channels will be reported
        :type channel: str
        :param events: Filter by event type. Valid event are: * hard_bounced - just hard bounces * failed - all failed messages, i.e. hard_bounced + the rest of failed * delivered - delivered messages * sent - delivered+failed (default events value) * pending - pending messages * total - all messages, i.e. sent+pending * abuse - spam complaints  If not specified all events are included. 
        :type events: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatusResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'report_id',
            'frequency',
            'report_time',
            'channel',
            'events'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_reports_periodic_report_id_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_id' is set
        if self.api_client.client_side_validation and ('report_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['report_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `report_id` when calling `v4_reports_periodic_report_id_patch`")  # noqa: E501
        # verify the required parameter 'frequency' is set
        if self.api_client.client_side_validation and ('frequency' not in local_var_params or  # noqa: E501
                                                        local_var_params['frequency'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `frequency` when calling `v4_reports_periodic_report_id_patch`")  # noqa: E501
        # verify the required parameter 'report_time' is set
        if self.api_client.client_side_validation and ('report_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['report_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `report_time` when calling `v4_reports_periodic_report_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_id' in local_var_params:
            path_params['report_id'] = local_var_params['report_id']  # noqa: E501

        query_params = []
        if 'frequency' in local_var_params and local_var_params['frequency'] is not None:  # noqa: E501
            query_params.append(('frequency', local_var_params['frequency']))  # noqa: E501
        if 'report_time' in local_var_params and local_var_params['report_time'] is not None:  # noqa: E501
            query_params.append(('report_time', local_var_params['report_time']))  # noqa: E501
        if 'channel' in local_var_params and local_var_params['channel'] is not None:  # noqa: E501
            query_params.append(('channel', local_var_params['channel']))  # noqa: E501
        if 'events' in local_var_params and local_var_params['events'] is not None:  # noqa: E501
            query_params.append(('events', local_var_params['events']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiID', 'apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v4/reports/periodic/{report_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v4_reports_report_id_get(self, report_id, **kwargs):  # noqa: E501
        """Get Report Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_report_id_get(report_id, async_req=True)
        >>> result = thread.get()

        :param report_id: ID of a given report (required)
        :type report_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Report
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_reports_report_id_get_with_http_info(report_id, **kwargs)  # noqa: E501

    def v4_reports_report_id_get_with_http_info(self, report_id, **kwargs):  # noqa: E501
        """Get Report Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_reports_report_id_get_with_http_info(report_id, async_req=True)
        >>> result = thread.get()

        :param report_id: ID of a given report (required)
        :type report_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Report, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'report_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_reports_report_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'report_id' is set
        if self.api_client.client_side_validation and ('report_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['report_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `report_id` when calling `v4_reports_report_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_id' in local_var_params:
            path_params['report_id'] = local_var_params['report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiID', 'apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v4/reports/{report_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Report',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
