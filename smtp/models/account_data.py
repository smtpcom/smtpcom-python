# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from smtp.configuration import Configuration


class AccountData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'website': 'str',
        'email': 'str',
        'company_name': 'str',
        'address': 'AccountDataAddress',
        'usage': 'int',
        'date_created': 'int'
    }

    attribute_map = {
        'status': 'status',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'phone': 'phone',
        'website': 'website',
        'email': 'email',
        'company_name': 'company_name',
        'address': 'address',
        'usage': 'usage',
        'date_created': 'date created'
    }

    def __init__(self, status=None, first_name=None, last_name=None, phone=None, website=None, email=None, company_name=None, address=None, usage=None, date_created=None, local_vars_configuration=None):  # noqa: E501
        """AccountData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._website = None
        self._email = None
        self._company_name = None
        self._address = None
        self._usage = None
        self._date_created = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone
        if website is not None:
            self.website = website
        if email is not None:
            self.email = email
        if company_name is not None:
            self.company_name = company_name
        if address is not None:
            self.address = address
        if usage is not None:
            self.usage = usage
        if date_created is not None:
            self.date_created = date_created

    @property
    def status(self):
        """Gets the status of this AccountData.  # noqa: E501

        Status of the account  # noqa: E501

        :return: The status of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountData.

        Status of the account  # noqa: E501

        :param status: The status of this AccountData.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def first_name(self):
        """Gets the first_name of this AccountData.  # noqa: E501

        First name of account owner  # noqa: E501

        :return: The first_name of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AccountData.

        First name of account owner  # noqa: E501

        :param first_name: The first_name of this AccountData.  # noqa: E501
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AccountData.  # noqa: E501

        Last name of account owner  # noqa: E501

        :return: The last_name of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AccountData.

        Last name of account owner  # noqa: E501

        :param last_name: The last_name of this AccountData.  # noqa: E501
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this AccountData.  # noqa: E501

        Phone number of account owner  # noqa: E501

        :return: The phone of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AccountData.

        Phone number of account owner  # noqa: E501

        :param phone: The phone of this AccountData.  # noqa: E501
        :type phone: str
        """

        self._phone = phone

    @property
    def website(self):
        """Gets the website of this AccountData.  # noqa: E501

        Website of account owner  # noqa: E501

        :return: The website of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this AccountData.

        Website of account owner  # noqa: E501

        :param website: The website of this AccountData.  # noqa: E501
        :type website: str
        """

        self._website = website

    @property
    def email(self):
        """Gets the email of this AccountData.  # noqa: E501

        Email address of account owner  # noqa: E501

        :return: The email of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountData.

        Email address of account owner  # noqa: E501

        :param email: The email of this AccountData.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def company_name(self):
        """Gets the company_name of this AccountData.  # noqa: E501

        Account owner’s company name  # noqa: E501

        :return: The company_name of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AccountData.

        Account owner’s company name  # noqa: E501

        :param company_name: The company_name of this AccountData.  # noqa: E501
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def address(self):
        """Gets the address of this AccountData.  # noqa: E501


        :return: The address of this AccountData.  # noqa: E501
        :rtype: AccountDataAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccountData.


        :param address: The address of this AccountData.  # noqa: E501
        :type address: AccountDataAddress
        """

        self._address = address

    @property
    def usage(self):
        """Gets the usage of this AccountData.  # noqa: E501

        Account's usage  # noqa: E501

        :return: The usage of this AccountData.  # noqa: E501
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AccountData.

        Account's usage  # noqa: E501

        :param usage: The usage of this AccountData.  # noqa: E501
        :type usage: int
        """

        self._usage = usage

    @property
    def date_created(self):
        """Gets the date_created of this AccountData.  # noqa: E501

        Account's creation time (in UTC)  # noqa: E501

        :return: The date_created of this AccountData.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AccountData.

        Account's creation time (in UTC)  # noqa: E501

        :param date_created: The date_created of this AccountData.  # noqa: E501
        :type date_created: int
        """

        self._date_created = date_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountData):
            return True

        return self.to_dict() != other.to_dict()
