# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from smtp.configuration import Configuration


class GetAlertResponseDataItems(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'threshold': 'str',
        'alert_id': 'str'
    }

    attribute_map = {
        'type': 'type',
        'threshold': 'threshold',
        'alert_id': 'alert_id'
    }

    def __init__(self, type=None, threshold=None, alert_id=None, local_vars_configuration=None):  # noqa: E501
        """GetAlertResponseDataItems - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._threshold = None
        self._alert_id = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if threshold is not None:
            self.threshold = threshold
        if alert_id is not None:
            self.alert_id = alert_id

    @property
    def type(self):
        """Gets the type of this GetAlertResponseDataItems.  # noqa: E501

        An alert’s type. Currently only “monthly_quota” is supported  # noqa: E501

        :return: The type of this GetAlertResponseDataItems.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetAlertResponseDataItems.

        An alert’s type. Currently only “monthly_quota” is supported  # noqa: E501

        :param type: The type of this GetAlertResponseDataItems.  # noqa: E501
        :type type: str
        """
        allowed_values = ["monthly_quota"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def threshold(self):
        """Gets the threshold of this GetAlertResponseDataItems.  # noqa: E501

        A number which represents a percentage of an account’s monthly quota. Must be decimal between 0 and 1  # noqa: E501

        :return: The threshold of this GetAlertResponseDataItems.  # noqa: E501
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this GetAlertResponseDataItems.

        A number which represents a percentage of an account’s monthly quota. Must be decimal between 0 and 1  # noqa: E501

        :param threshold: The threshold of this GetAlertResponseDataItems.  # noqa: E501
        :type threshold: str
        """
        allowed_values = ["0.5", "0.75", "0.9", "1"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and threshold not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `threshold` ({0}), must be one of {1}"  # noqa: E501
                .format(threshold, allowed_values)
            )

        self._threshold = threshold

    @property
    def alert_id(self):
        """Gets the alert_id of this GetAlertResponseDataItems.  # noqa: E501

        alert ID  # noqa: E501

        :return: The alert_id of this GetAlertResponseDataItems.  # noqa: E501
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this GetAlertResponseDataItems.

        alert ID  # noqa: E501

        :param alert_id: The alert_id of this GetAlertResponseDataItems.  # noqa: E501
        :type alert_id: str
        """

        self._alert_id = alert_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAlertResponseDataItems):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetAlertResponseDataItems):
            return True

        return self.to_dict() != other.to_dict()
