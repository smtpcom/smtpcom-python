# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from smtp.configuration import Configuration


class ChannelData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'quota': 'int',
        'label': 'str',
        'usage': 'int',
        'date_created': 'int',
        'smtp_username': 'str'
    }

    attribute_map = {
        'status': 'status',
        'quota': 'quota',
        'label': 'label',
        'usage': 'usage',
        'date_created': 'date_created',
        'smtp_username': 'smtp_username'
    }

    def __init__(self, status=None, quota=None, label=None, usage=None, date_created=None, smtp_username=None, local_vars_configuration=None):  # noqa: E501
        """ChannelData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._quota = None
        self._label = None
        self._usage = None
        self._date_created = None
        self._smtp_username = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if quota is not None:
            self.quota = quota
        if label is not None:
            self.label = label
        if usage is not None:
            self.usage = usage
        if date_created is not None:
            self.date_created = date_created
        if smtp_username is not None:
            self.smtp_username = smtp_username

    @property
    def status(self):
        """Gets the status of this ChannelData.  # noqa: E501

        Current status of the channel  # noqa: E501

        :return: The status of this ChannelData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChannelData.

        Current status of the channel  # noqa: E501

        :param status: The status of this ChannelData.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def quota(self):
        """Gets the quota of this ChannelData.  # noqa: E501

        Quota for the channel  # noqa: E501

        :return: The quota of this ChannelData.  # noqa: E501
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this ChannelData.

        Quota for the channel  # noqa: E501

        :param quota: The quota of this ChannelData.  # noqa: E501
        :type quota: int
        """

        self._quota = quota

    @property
    def label(self):
        """Gets the label of this ChannelData.  # noqa: E501

        TODO FIXME  # noqa: E501

        :return: The label of this ChannelData.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ChannelData.

        TODO FIXME  # noqa: E501

        :param label: The label of this ChannelData.  # noqa: E501
        :type label: str
        """

        self._label = label

    @property
    def usage(self):
        """Gets the usage of this ChannelData.  # noqa: E501

        Current usage for the channel  # noqa: E501

        :return: The usage of this ChannelData.  # noqa: E501
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this ChannelData.

        Current usage for the channel  # noqa: E501

        :param usage: The usage of this ChannelData.  # noqa: E501
        :type usage: int
        """

        self._usage = usage

    @property
    def date_created(self):
        """Gets the date_created of this ChannelData.  # noqa: E501

        Timestamp for when the channel was originally created  # noqa: E501

        :return: The date_created of this ChannelData.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ChannelData.

        Timestamp for when the channel was originally created  # noqa: E501

        :param date_created: The date_created of this ChannelData.  # noqa: E501
        :type date_created: int
        """

        self._date_created = date_created

    @property
    def smtp_username(self):
        """Gets the smtp_username of this ChannelData.  # noqa: E501

        Username for the channel  # noqa: E501

        :return: The smtp_username of this ChannelData.  # noqa: E501
        :rtype: str
        """
        return self._smtp_username

    @smtp_username.setter
    def smtp_username(self, smtp_username):
        """Sets the smtp_username of this ChannelData.

        Username for the channel  # noqa: E501

        :param smtp_username: The smtp_username of this ChannelData.  # noqa: E501
        :type smtp_username: str
        """

        self._smtp_username = smtp_username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChannelData):
            return True

        return self.to_dict() != other.to_dict()
