# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from smtp.configuration import Configuration


class Report(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'frequency': 'str',
        'report_id': 'str',
        'events': 'str',
        'channel': 'str',
        'report_time': 'str',
        'status': 'str',
        'name': 'str',
        'url': 'str',
        'time_req': 'int',
        'progress': 'int'
    }

    attribute_map = {
        'frequency': 'frequency',
        'report_id': 'report_id',
        'events': 'events',
        'channel': 'channel',
        'report_time': 'report_time',
        'status': 'status',
        'name': 'name',
        'url': 'url',
        'time_req': 'time_req',
        'progress': 'progress'
    }

    def __init__(self, frequency=None, report_id=None, events=None, channel=None, report_time=None, status=None, name=None, url=None, time_req=None, progress=None, local_vars_configuration=None):  # noqa: E501
        """Report - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._frequency = None
        self._report_id = None
        self._events = None
        self._channel = None
        self._report_time = None
        self._status = None
        self._name = None
        self._url = None
        self._time_req = None
        self._progress = None
        self.discriminator = None

        if frequency is not None:
            self.frequency = frequency
        if report_id is not None:
            self.report_id = report_id
        if events is not None:
            self.events = events
        if channel is not None:
            self.channel = channel
        if report_time is not None:
            self.report_time = report_time
        if status is not None:
            self.status = status
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if time_req is not None:
            self.time_req = time_req
        if progress is not None:
            self.progress = progress

    @property
    def frequency(self):
        """Gets the frequency of this Report.  # noqa: E501

        Report frequency – one of:   * daily - every day at a specified hour   * weekly - Mondays at a specified hour   * monthly - 1st day of the month at a specified hour   # noqa: E501

        :return: The frequency of this Report.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Report.

        Report frequency – one of:   * daily - every day at a specified hour   * weekly - Mondays at a specified hour   * monthly - 1st day of the month at a specified hour   # noqa: E501

        :param frequency: The frequency of this Report.  # noqa: E501
        :type frequency: str
        """
        allowed_values = ["monthly", "weekly", "daily"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and frequency not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def report_id(self):
        """Gets the report_id of this Report.  # noqa: E501

        Unique report ID  # noqa: E501

        :return: The report_id of this Report.  # noqa: E501
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this Report.

        Unique report ID  # noqa: E501

        :param report_id: The report_id of this Report.  # noqa: E501
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def events(self):
        """Gets the events of this Report.  # noqa: E501

        Preset of events returned in a report:    * hard_bounced   * failed   * delivered   * sent   * pending   * total   * abuse If not specified all events are included.   # noqa: E501

        :return: The events of this Report.  # noqa: E501
        :rtype: str
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Report.

        Preset of events returned in a report:    * hard_bounced   * failed   * delivered   * sent   * pending   * total   * abuse If not specified all events are included.   # noqa: E501

        :param events: The events of this Report.  # noqa: E501
        :type events: str
        """

        self._events = events

    @property
    def channel(self):
        """Gets the channel of this Report.  # noqa: E501

        Name of channel (sender). If not specified all channels will be reported  # noqa: E501

        :return: The channel of this Report.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Report.

        Name of channel (sender). If not specified all channels will be reported  # noqa: E501

        :param channel: The channel of this Report.  # noqa: E501
        :type channel: str
        """

        self._channel = channel

    @property
    def report_time(self):
        """Gets the report_time of this Report.  # noqa: E501

        The hour at which the report should be sent, values range from 0 to 23  # noqa: E501

        :return: The report_time of this Report.  # noqa: E501
        :rtype: str
        """
        return self._report_time

    @report_time.setter
    def report_time(self, report_time):
        """Sets the report_time of this Report.

        The hour at which the report should be sent, values range from 0 to 23  # noqa: E501

        :param report_time: The report_time of this Report.  # noqa: E501
        :type report_time: str
        """

        self._report_time = report_time

    @property
    def status(self):
        """Gets the status of this Report.  # noqa: E501

        Current status of a given on-demand report  # noqa: E501

        :return: The status of this Report.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Report.

        Current status of a given on-demand report  # noqa: E501

        :param status: The status of this Report.  # noqa: E501
        :type status: str
        """
        allowed_values = ["in_progress", "done", "pending"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def name(self):
        """Gets the name of this Report.  # noqa: E501

        Human readable name of an on-demand report (auto-generated)  # noqa: E501

        :return: The name of this Report.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Report.

        Human readable name of an on-demand report (auto-generated)  # noqa: E501

        :param name: The name of this Report.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Report.  # noqa: E501

        The unique URL from which to download an on-demand report from  # noqa: E501

        :return: The url of this Report.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Report.

        The unique URL from which to download an on-demand report from  # noqa: E501

        :param url: The url of this Report.  # noqa: E501
        :type url: str
        """

        self._url = url

    @property
    def time_req(self):
        """Gets the time_req of this Report.  # noqa: E501

        Time when a given on-demand report has been requestedi. RFC 2822 or UNIX epoch format  # noqa: E501

        :return: The time_req of this Report.  # noqa: E501
        :rtype: int
        """
        return self._time_req

    @time_req.setter
    def time_req(self, time_req):
        """Sets the time_req of this Report.

        Time when a given on-demand report has been requestedi. RFC 2822 or UNIX epoch format  # noqa: E501

        :param time_req: The time_req of this Report.  # noqa: E501
        :type time_req: int
        """

        self._time_req = time_req

    @property
    def progress(self):
        """Gets the progress of this Report.  # noqa: E501

        Percentage of completion for an on-demand report  # noqa: E501

        :return: The progress of this Report.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Report.

        Percentage of completion for an on-demand report  # noqa: E501

        :param progress: The progress of this Report.  # noqa: E501
        :type progress: int
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Report):
            return True

        return self.to_dict() != other.to_dict()
