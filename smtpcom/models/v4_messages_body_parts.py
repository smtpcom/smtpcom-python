# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from smtpcom.configuration import Configuration


class V4MessagesBodyParts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'type': 'str',
        'charset': 'str',
        'encoding': 'str',
        'content': 'str'
    }

    attribute_map = {
        'version': 'version',
        'type': 'type',
        'charset': 'charset',
        'encoding': 'encoding',
        'content': 'content'
    }

    def __init__(self, version=None, type=None, charset=None, encoding=None, content=None, local_vars_configuration=None):  # noqa: E501
        """V4MessagesBodyParts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._type = None
        self._charset = None
        self._encoding = None
        self._content = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if type is not None:
            self.type = type
        if charset is not None:
            self.charset = charset
        if encoding is not None:
            self.encoding = encoding
        if content is not None:
            self.content = content

    @property
    def version(self):
        """Gets the version of this V4MessagesBodyParts.  # noqa: E501

        MIME version. By default set to `1.0`  # noqa: E501

        :return: The version of this V4MessagesBodyParts.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V4MessagesBodyParts.

        MIME version. By default set to `1.0`  # noqa: E501

        :param version: The version of this V4MessagesBodyParts.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def type(self):
        """Gets the type of this V4MessagesBodyParts.  # noqa: E501

        MIME type. By default set to `plain/text`  # noqa: E501

        :return: The type of this V4MessagesBodyParts.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V4MessagesBodyParts.

        MIME type. By default set to `plain/text`  # noqa: E501

        :param type: The type of this V4MessagesBodyParts.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def charset(self):
        """Gets the charset of this V4MessagesBodyParts.  # noqa: E501

        Content character set -- i.e. UTF-8, ISO-8859-1, etc.  # noqa: E501

        :return: The charset of this V4MessagesBodyParts.  # noqa: E501
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this V4MessagesBodyParts.

        Content character set -- i.e. UTF-8, ISO-8859-1, etc.  # noqa: E501

        :param charset: The charset of this V4MessagesBodyParts.  # noqa: E501
        :type charset: str
        """

        self._charset = charset

    @property
    def encoding(self):
        """Gets the encoding of this V4MessagesBodyParts.  # noqa: E501

        Content encoding – i.e. 7bit, quoted-printable, base64, etc. default base64  # noqa: E501

        :return: The encoding of this V4MessagesBodyParts.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this V4MessagesBodyParts.

        Content encoding – i.e. 7bit, quoted-printable, base64, etc. default base64  # noqa: E501

        :param encoding: The encoding of this V4MessagesBodyParts.  # noqa: E501
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def content(self):
        """Gets the content of this V4MessagesBodyParts.  # noqa: E501

        Actual part’s content in its raw form  # noqa: E501

        :return: The content of this V4MessagesBodyParts.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this V4MessagesBodyParts.

        Actual part’s content in its raw form  # noqa: E501

        :param content: The content of this V4MessagesBodyParts.  # noqa: E501
        :type content: str
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4MessagesBodyParts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4MessagesBodyParts):
            return True

        return self.to_dict() != other.to_dict()
