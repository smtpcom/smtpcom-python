# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from smtpcom.configuration import Configuration


class GetDomainDetailsData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'domain_name': 'str',
        'selector': 'str',
        'private_key': 'str',
        'is_valid': 'bool'
    }

    attribute_map = {
        'domain_name': 'domain_name',
        'selector': 'selector',
        'private_key': 'private_key',
        'is_valid': 'is_valid'
    }

    def __init__(self, domain_name=None, selector=None, private_key=None, is_valid=None, local_vars_configuration=None):  # noqa: E501
        """GetDomainDetailsData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._domain_name = None
        self._selector = None
        self._private_key = None
        self._is_valid = None
        self.discriminator = None

        if domain_name is not None:
            self.domain_name = domain_name
        if selector is not None:
            self.selector = selector
        if private_key is not None:
            self.private_key = private_key
        if is_valid is not None:
            self.is_valid = is_valid

    @property
    def domain_name(self):
        """Gets the domain_name of this GetDomainDetailsData.  # noqa: E501

        Registered domain name  # noqa: E501

        :return: The domain_name of this GetDomainDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this GetDomainDetailsData.

        Registered domain name  # noqa: E501

        :param domain_name: The domain_name of this GetDomainDetailsData.  # noqa: E501
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def selector(self):
        """Gets the selector of this GetDomainDetailsData.  # noqa: E501

        Name of the DKIM selector for this domain  # noqa: E501

        :return: The selector of this GetDomainDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this GetDomainDetailsData.

        Name of the DKIM selector for this domain  # noqa: E501

        :param selector: The selector of this GetDomainDetailsData.  # noqa: E501
        :type selector: str
        """

        self._selector = selector

    @property
    def private_key(self):
        """Gets the private_key of this GetDomainDetailsData.  # noqa: E501

        Private key of the DKIM record  # noqa: E501

        :return: The private_key of this GetDomainDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this GetDomainDetailsData.

        Private key of the DKIM record  # noqa: E501

        :param private_key: The private_key of this GetDomainDetailsData.  # noqa: E501
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def is_valid(self):
        """Gets the is_valid of this GetDomainDetailsData.  # noqa: E501

        Boolean flag indicating whether this DKIM is valid – i.e. private key matches the public key, identified by a selector for this domain  # noqa: E501

        :return: The is_valid of this GetDomainDetailsData.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this GetDomainDetailsData.

        Boolean flag indicating whether this DKIM is valid – i.e. private key matches the public key, identified by a selector for this domain  # noqa: E501

        :param is_valid: The is_valid of this GetDomainDetailsData.  # noqa: E501
        :type is_valid: bool
        """

        self._is_valid = is_valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDomainDetailsData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetDomainDetailsData):
            return True

        return self.to_dict() != other.to_dict()
