# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from smtpcom.configuration import Configuration


class V4MessagesMimeRecipients(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'to': 'list[V4MessagesRecipientsTo]',
        'cc': 'list[V4MessagesRecipientsTo]',
        'bcc': 'list[V4MessagesRecipientsTo]',
        'bulk_list': 'list[V4MessagesRecipientsTo]'
    }

    attribute_map = {
        'to': 'to',
        'cc': 'cc',
        'bcc': 'bcc',
        'bulk_list': 'bulk_list'
    }

    def __init__(self, to=None, cc=None, bcc=None, bulk_list=None, local_vars_configuration=None):  # noqa: E501
        """V4MessagesMimeRecipients - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._to = None
        self._cc = None
        self._bcc = None
        self._bulk_list = None
        self.discriminator = None

        if to is not None:
            self.to = to
        if cc is not None:
            self.cc = cc
        if bcc is not None:
            self.bcc = bcc
        if bulk_list is not None:
            self.bulk_list = bulk_list

    @property
    def to(self):
        """Gets the to of this V4MessagesMimeRecipients.  # noqa: E501

        TO recipients list  # noqa: E501

        :return: The to of this V4MessagesMimeRecipients.  # noqa: E501
        :rtype: list[V4MessagesRecipientsTo]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this V4MessagesMimeRecipients.

        TO recipients list  # noqa: E501

        :param to: The to of this V4MessagesMimeRecipients.  # noqa: E501
        :type to: list[V4MessagesRecipientsTo]
        """

        self._to = to

    @property
    def cc(self):
        """Gets the cc of this V4MessagesMimeRecipients.  # noqa: E501

        CC recipients list  # noqa: E501

        :return: The cc of this V4MessagesMimeRecipients.  # noqa: E501
        :rtype: list[V4MessagesRecipientsTo]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this V4MessagesMimeRecipients.

        CC recipients list  # noqa: E501

        :param cc: The cc of this V4MessagesMimeRecipients.  # noqa: E501
        :type cc: list[V4MessagesRecipientsTo]
        """

        self._cc = cc

    @property
    def bcc(self):
        """Gets the bcc of this V4MessagesMimeRecipients.  # noqa: E501

        BCC recipients list  # noqa: E501

        :return: The bcc of this V4MessagesMimeRecipients.  # noqa: E501
        :rtype: list[V4MessagesRecipientsTo]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this V4MessagesMimeRecipients.

        BCC recipients list  # noqa: E501

        :param bcc: The bcc of this V4MessagesMimeRecipients.  # noqa: E501
        :type bcc: list[V4MessagesRecipientsTo]
        """

        self._bcc = bcc

    @property
    def bulk_list(self):
        """Gets the bulk_list of this V4MessagesMimeRecipients.  # noqa: E501

        Distribution list. Instead of an individual email to multiple recipients, multiple emails to multiple recipients will be created.  # noqa: E501

        :return: The bulk_list of this V4MessagesMimeRecipients.  # noqa: E501
        :rtype: list[V4MessagesRecipientsTo]
        """
        return self._bulk_list

    @bulk_list.setter
    def bulk_list(self, bulk_list):
        """Sets the bulk_list of this V4MessagesMimeRecipients.

        Distribution list. Instead of an individual email to multiple recipients, multiple emails to multiple recipients will be created.  # noqa: E501

        :param bulk_list: The bulk_list of this V4MessagesMimeRecipients.  # noqa: E501
        :type bulk_list: list[V4MessagesRecipientsTo]
        """

        self._bulk_list = bulk_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4MessagesMimeRecipients):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4MessagesMimeRecipients):
            return True

        return self.to_dict() != other.to_dict()
