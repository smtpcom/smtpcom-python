# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from smtpcom.configuration import Configuration


class InlineObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'channel': 'str',
        'recipients': 'V4MessagesRecipients',
        'originator': 'V4MessagesOriginator',
        'custom_headers': 'object',
        'subject': 'str',
        'body': 'V4MessagesBody'
    }

    attribute_map = {
        'channel': 'channel',
        'recipients': 'recipients',
        'originator': 'originator',
        'custom_headers': 'custom_headers',
        'subject': 'subject',
        'body': 'body'
    }

    def __init__(self, channel=None, recipients=None, originator=None, custom_headers=None, subject=None, body=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._channel = None
        self._recipients = None
        self._originator = None
        self._custom_headers = None
        self._subject = None
        self._body = None
        self.discriminator = None

        if channel is not None:
            self.channel = channel
        if recipients is not None:
            self.recipients = recipients
        if originator is not None:
            self.originator = originator
        if custom_headers is not None:
            self.custom_headers = custom_headers
        if subject is not None:
            self.subject = subject
        if body is not None:
            self.body = body

    @property
    def channel(self):
        """Gets the channel of this InlineObject.  # noqa: E501

        Name of  the channel through which the email will be sent  # noqa: E501

        :return: The channel of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this InlineObject.

        Name of  the channel through which the email will be sent  # noqa: E501

        :param channel: The channel of this InlineObject.  # noqa: E501
        :type channel: str
        """

        self._channel = channel

    @property
    def recipients(self):
        """Gets the recipients of this InlineObject.  # noqa: E501


        :return: The recipients of this InlineObject.  # noqa: E501
        :rtype: V4MessagesRecipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this InlineObject.


        :param recipients: The recipients of this InlineObject.  # noqa: E501
        :type recipients: V4MessagesRecipients
        """

        self._recipients = recipients

    @property
    def originator(self):
        """Gets the originator of this InlineObject.  # noqa: E501


        :return: The originator of this InlineObject.  # noqa: E501
        :rtype: V4MessagesOriginator
        """
        return self._originator

    @originator.setter
    def originator(self, originator):
        """Sets the originator of this InlineObject.


        :param originator: The originator of this InlineObject.  # noqa: E501
        :type originator: V4MessagesOriginator
        """

        self._originator = originator

    @property
    def custom_headers(self):
        """Gets the custom_headers of this InlineObject.  # noqa: E501

        A name of a header to customize (both standard and non-standard) and its value, which can be either string or array of strings  # noqa: E501

        :return: The custom_headers of this InlineObject.  # noqa: E501
        :rtype: object
        """
        return self._custom_headers

    @custom_headers.setter
    def custom_headers(self, custom_headers):
        """Sets the custom_headers of this InlineObject.

        A name of a header to customize (both standard and non-standard) and its value, which can be either string or array of strings  # noqa: E501

        :param custom_headers: The custom_headers of this InlineObject.  # noqa: E501
        :type custom_headers: object
        """

        self._custom_headers = custom_headers

    @property
    def subject(self):
        """Gets the subject of this InlineObject.  # noqa: E501

        Email subject. Multiline value is supported, `998` characters max  # noqa: E501

        :return: The subject of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this InlineObject.

        Email subject. Multiline value is supported, `998` characters max  # noqa: E501

        :param subject: The subject of this InlineObject.  # noqa: E501
        :type subject: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this InlineObject.  # noqa: E501


        :return: The body of this InlineObject.  # noqa: E501
        :rtype: V4MessagesBody
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this InlineObject.


        :param body: The body of this InlineObject.  # noqa: E501
        :type body: V4MessagesBody
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject):
            return True

        return self.to_dict() != other.to_dict()
