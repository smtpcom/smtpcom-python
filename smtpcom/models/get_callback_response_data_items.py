# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from smtpcom.configuration import Configuration


class GetCallbackResponseDataItems(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'medium': 'str',
        'event': 'str',
        'channel': 'str',
        'address': 'str',
        'aws_data': 'str'
    }

    attribute_map = {
        'medium': 'medium',
        'event': 'event',
        'channel': 'channel',
        'address': 'address',
        'aws_data': 'aws_data'
    }

    def __init__(self, medium=None, event=None, channel=None, address=None, aws_data=None, local_vars_configuration=None):  # noqa: E501
        """GetCallbackResponseDataItems - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._medium = None
        self._event = None
        self._channel = None
        self._address = None
        self._aws_data = None
        self.discriminator = None

        if medium is not None:
            self.medium = medium
        if event is not None:
            self.event = event
        if channel is not None:
            self.channel = channel
        if address is not None:
            self.address = address
        if aws_data is not None:
            self.aws_data = aws_data

    @property
    def medium(self):
        """Gets the medium of this GetCallbackResponseDataItems.  # noqa: E501

        Medium by which the callback data is sent. Possible values are one of:   * http   * aws   # noqa: E501

        :return: The medium of this GetCallbackResponseDataItems.  # noqa: E501
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this GetCallbackResponseDataItems.

        Medium by which the callback data is sent. Possible values are one of:   * http   * aws   # noqa: E501

        :param medium: The medium of this GetCallbackResponseDataItems.  # noqa: E501
        :type medium: str
        """
        allowed_values = ["http", "aws"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and medium not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `medium` ({0}), must be one of {1}"  # noqa: E501
                .format(medium, allowed_values)
            )

        self._medium = medium

    @property
    def event(self):
        """Gets the event of this GetCallbackResponseDataItems.  # noqa: E501

        Event for which the callback has been created. Valid types are:  * delivered -  message delivered * failed - message bounced * complained - complaint received * bounceback - bounce back notification received * received - message received by our system * queued - message in queue (transient) * hard_bounced - hard bounce received * opened - message opened * clicked - URL in message clicked * unsubscribed - unsubscribe received   # noqa: E501

        :return: The event of this GetCallbackResponseDataItems.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this GetCallbackResponseDataItems.

        Event for which the callback has been created. Valid types are:  * delivered -  message delivered * failed - message bounced * complained - complaint received * bounceback - bounce back notification received * received - message received by our system * queued - message in queue (transient) * hard_bounced - hard bounce received * opened - message opened * clicked - URL in message clicked * unsubscribed - unsubscribe received   # noqa: E501

        :param event: The event of this GetCallbackResponseDataItems.  # noqa: E501
        :type event: str
        """

        self._event = event

    @property
    def channel(self):
        """Gets the channel of this GetCallbackResponseDataItems.  # noqa: E501

        Name of the channel for which the callback has been created  # noqa: E501

        :return: The channel of this GetCallbackResponseDataItems.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this GetCallbackResponseDataItems.

        Name of the channel for which the callback has been created  # noqa: E501

        :param channel: The channel of this GetCallbackResponseDataItems.  # noqa: E501
        :type channel: str
        """

        self._channel = channel

    @property
    def address(self):
        """Gets the address of this GetCallbackResponseDataItems.  # noqa: E501

        Address to which the callback data is sent. This will be either a URL for http-based callbacks or the Amazon SQS queue name for SQS-based callbacks  # noqa: E501

        :return: The address of this GetCallbackResponseDataItems.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GetCallbackResponseDataItems.

        Address to which the callback data is sent. This will be either a URL for http-based callbacks or the Amazon SQS queue name for SQS-based callbacks  # noqa: E501

        :param address: The address of this GetCallbackResponseDataItems.  # noqa: E501
        :type address: str
        """

        self._address = address

    @property
    def aws_data(self):
        """Gets the aws_data of this GetCallbackResponseDataItems.  # noqa: E501

        Amazon SQS settings  # noqa: E501

        :return: The aws_data of this GetCallbackResponseDataItems.  # noqa: E501
        :rtype: str
        """
        return self._aws_data

    @aws_data.setter
    def aws_data(self, aws_data):
        """Sets the aws_data of this GetCallbackResponseDataItems.

        Amazon SQS settings  # noqa: E501

        :param aws_data: The aws_data of this GetCallbackResponseDataItems.  # noqa: E501
        :type aws_data: str
        """

        self._aws_data = aws_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCallbackResponseDataItems):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCallbackResponseDataItems):
            return True

        return self.to_dict() != other.to_dict()
