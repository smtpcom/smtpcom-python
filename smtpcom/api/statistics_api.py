# coding: utf-8

"""
    SMTP Public API overview

    SMTP.com Public API v4  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Contact: support@smtp.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from smtpcom.api_client import ApiClient
from smtpcom.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class StatisticsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v4_stats_duration_slice_slice_specifier_group_by_get(self, start, duration, slice, slice_specifier, group_by, limit, offset, **kwargs):  # noqa: E501
        """Return event aggregates for the specified slices and duration. Slices can be chained.  # noqa: E501

        **Get stats for a period**<br> Request:<br> */v4/stats/last_day*<br> */v4/stats?start=Tue%2C%2016%20Jan%2015%3A14%3A29%20%2B0000*<br> Response:<br> ``` {\"accepted\": 300, \"delivered\": 100, \"complained\": 0, \"failed\": 50, \"bounced\": 150, \"queued\": 0} ``` <br><br> **Get stats for a period, grouped by channel**<br> Request:<br> */v4/stats/last_day/channel*<br> Response:<br> ``` {\"channel1\": {\"accepted\": 30, \"delivered\": 10, \"complained\": 0, \"failed\": 5, \"bounced\": 15, \"queued\": 0}, \"channel2\": {\"accepted\": 0, \"delivered\": 0, \"complained\": 0, \"failed\": 0, \"bounced\": 0, \"queued\": 0}} ``` <br><br> **Get stats for specific sending domain and channel (sender) and period, grouped by ISP**<br> Request:<br> */v4/stats/last_day/channel/marketing/domain/smtp.com/rcpt_isp*<br> Response:<br> ``` {\"yahoo\": {\"accepted\": 30, \"delivered\": 10, \"complained\": 0, \"failed\": 5, \"bounced\": 15, \"queued\": 0}, \"google\": {\"accepted\": 0, \"delivered\": 0, \"complained\": 0, \"failed\": 0, \"bounced\": 0, \"queued\": 0}} ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_stats_duration_slice_slice_specifier_group_by_get(start, duration, slice, slice_specifier, group_by, limit, offset, async_req=True)
        >>> result = thread.get()

        :param start: The starting time. Required if the `{duration}` path parameter is not specified. RFC 2822 or UNIX epoch format. (required)
        :type start: str
        :param duration: A standardized shorthand for a known start/end bracket. Duration automatically supersedes start/end values provided as query string parameters. One of either the `{duration}` path parameter or the `start` query parameter must be specified.  <table>  <tr><th>Value</th><th>Start</th><th>End</th><th>Slicable</th></tr>  <tr><td>last_24hrs</td><td>84,400 seconds ago</td><td>Now</td><td>yes</td></tr>  <tr><td>last_30days</td><td>18,144,000 seconds ago</td><td>Now</td><td>yes</td></tr>  <tr><td>last_7days</td><td>604,800 seconds ago</td><td>Now</td><td>yes</td></tr>  <tr><td>last_day</td><td>00:00:00 of the previous day</td><td>23:59:59 of the previous day</td><td>yes</td></tr>  <tr><td>last_hour</td><td>00:00 of the previous hour</td><td>59:59 of the previous hour</td><td>yes</td></tr>  <tr><td>last_month or mtd</td><td>1st day 00:00:00 of previous month</td><td>23:59:59 last day of previous month</td><td>yes</td></tr>  <tr><td>last_week</td><td>Monday 00:00:00 of previous week</td><td>Sunday 23:59:59 of previous week</td><td>yes</td></tr>  <tr><td>this_day</td><td>00:00:00 of current day</td><td>Now</td><td>yes</td></tr>  <tr><td>this_hour</td><td>00:00 of current clock hour</td><td>Now</td><td>yes</td></tr>  <tr><td>this_month</td><td>1st day 00:00:00 of current month</td><td>Now</td><td>yes</td></tr>  <tr><td>this_week</td><td>Monday 00:00:00 of current week</td><td>Now</td><td>yes</td></tr>  <tr><td>last_year</td><td> Jan 1st 00:00:00 of previous year</td><td>Dec 31st 23:59:59 of previous year</td><td>no</td></tr>  <tr><td>this_year or ytd</td><td>Jan 1st  00:00:0 of current year</td><td>Now</td><td>no</td></tr>  <tr><td>total</td><td>Account creation date</td><td>Now</td><td>no</td></tr>  </table>  (required)
        :type duration: str
        :param slice: A reducing method which can be applied to the requested duration. A final slice without an optional slice specifier will define a grouping.  Possible Values:  * `channel`: (optional) A given account's sender  * `domain`: (optional) Sending domain  * `rcpt_domain`: (optional) Recieving domain  * `rcpt_isp`: (optional) Receiving ISP     Slices can be chained in a meaningful way – for example:   ```   /last_month/channel/marketing/domain/smtp.com/rcpt_domain?event=complained   ``` would produce an aggregate of complaints for a current account’s channel (sender) called “marketing” which were:   * sent from the registered email domain “smtp.com”, and    * are grouped by receiving domains       The response would look something like:   ```   {“google.com”: {“complained”: 5}, “yahoo.com”: {“complained”:1}, “aol.com”: {“complained”:1}}   ```  (required)
        :type slice: str
        :param slice_specifier: slice value (smtp.com, sender1) (required)
        :type slice_specifier: str
        :param group_by: Define a grouping:  * `channel` - optionally to be followed by a channel ID or name specifier  * `domain`  - optionally to be followed by a registered domain name  * `rcpt_domain` - optionally to be followed by a registered domain name  * `rcpt_isp` - optionally to be followed by a registered domain name  (required)
        :type group_by: str
        :param limit: Maximum number of items to return. (required)
        :type limit: int
        :param offset: Number of items to skip before returning the results. (required)
        :type offset: int
        :param end: The ending time. If not specified, defaults to now. RFC 2822 or UNIX epoch format.
        :type end: str
        :param event: Array of any event names for which stats has been requested.
        :type event: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_stats_duration_slice_slice_specifier_group_by_get_with_http_info(start, duration, slice, slice_specifier, group_by, limit, offset, **kwargs)  # noqa: E501

    def v4_stats_duration_slice_slice_specifier_group_by_get_with_http_info(self, start, duration, slice, slice_specifier, group_by, limit, offset, **kwargs):  # noqa: E501
        """Return event aggregates for the specified slices and duration. Slices can be chained.  # noqa: E501

        **Get stats for a period**<br> Request:<br> */v4/stats/last_day*<br> */v4/stats?start=Tue%2C%2016%20Jan%2015%3A14%3A29%20%2B0000*<br> Response:<br> ``` {\"accepted\": 300, \"delivered\": 100, \"complained\": 0, \"failed\": 50, \"bounced\": 150, \"queued\": 0} ``` <br><br> **Get stats for a period, grouped by channel**<br> Request:<br> */v4/stats/last_day/channel*<br> Response:<br> ``` {\"channel1\": {\"accepted\": 30, \"delivered\": 10, \"complained\": 0, \"failed\": 5, \"bounced\": 15, \"queued\": 0}, \"channel2\": {\"accepted\": 0, \"delivered\": 0, \"complained\": 0, \"failed\": 0, \"bounced\": 0, \"queued\": 0}} ``` <br><br> **Get stats for specific sending domain and channel (sender) and period, grouped by ISP**<br> Request:<br> */v4/stats/last_day/channel/marketing/domain/smtp.com/rcpt_isp*<br> Response:<br> ``` {\"yahoo\": {\"accepted\": 30, \"delivered\": 10, \"complained\": 0, \"failed\": 5, \"bounced\": 15, \"queued\": 0}, \"google\": {\"accepted\": 0, \"delivered\": 0, \"complained\": 0, \"failed\": 0, \"bounced\": 0, \"queued\": 0}} ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v4_stats_duration_slice_slice_specifier_group_by_get_with_http_info(start, duration, slice, slice_specifier, group_by, limit, offset, async_req=True)
        >>> result = thread.get()

        :param start: The starting time. Required if the `{duration}` path parameter is not specified. RFC 2822 or UNIX epoch format. (required)
        :type start: str
        :param duration: A standardized shorthand for a known start/end bracket. Duration automatically supersedes start/end values provided as query string parameters. One of either the `{duration}` path parameter or the `start` query parameter must be specified.  <table>  <tr><th>Value</th><th>Start</th><th>End</th><th>Slicable</th></tr>  <tr><td>last_24hrs</td><td>84,400 seconds ago</td><td>Now</td><td>yes</td></tr>  <tr><td>last_30days</td><td>18,144,000 seconds ago</td><td>Now</td><td>yes</td></tr>  <tr><td>last_7days</td><td>604,800 seconds ago</td><td>Now</td><td>yes</td></tr>  <tr><td>last_day</td><td>00:00:00 of the previous day</td><td>23:59:59 of the previous day</td><td>yes</td></tr>  <tr><td>last_hour</td><td>00:00 of the previous hour</td><td>59:59 of the previous hour</td><td>yes</td></tr>  <tr><td>last_month or mtd</td><td>1st day 00:00:00 of previous month</td><td>23:59:59 last day of previous month</td><td>yes</td></tr>  <tr><td>last_week</td><td>Monday 00:00:00 of previous week</td><td>Sunday 23:59:59 of previous week</td><td>yes</td></tr>  <tr><td>this_day</td><td>00:00:00 of current day</td><td>Now</td><td>yes</td></tr>  <tr><td>this_hour</td><td>00:00 of current clock hour</td><td>Now</td><td>yes</td></tr>  <tr><td>this_month</td><td>1st day 00:00:00 of current month</td><td>Now</td><td>yes</td></tr>  <tr><td>this_week</td><td>Monday 00:00:00 of current week</td><td>Now</td><td>yes</td></tr>  <tr><td>last_year</td><td> Jan 1st 00:00:00 of previous year</td><td>Dec 31st 23:59:59 of previous year</td><td>no</td></tr>  <tr><td>this_year or ytd</td><td>Jan 1st  00:00:0 of current year</td><td>Now</td><td>no</td></tr>  <tr><td>total</td><td>Account creation date</td><td>Now</td><td>no</td></tr>  </table>  (required)
        :type duration: str
        :param slice: A reducing method which can be applied to the requested duration. A final slice without an optional slice specifier will define a grouping.  Possible Values:  * `channel`: (optional) A given account's sender  * `domain`: (optional) Sending domain  * `rcpt_domain`: (optional) Recieving domain  * `rcpt_isp`: (optional) Receiving ISP     Slices can be chained in a meaningful way – for example:   ```   /last_month/channel/marketing/domain/smtp.com/rcpt_domain?event=complained   ``` would produce an aggregate of complaints for a current account’s channel (sender) called “marketing” which were:   * sent from the registered email domain “smtp.com”, and    * are grouped by receiving domains       The response would look something like:   ```   {“google.com”: {“complained”: 5}, “yahoo.com”: {“complained”:1}, “aol.com”: {“complained”:1}}   ```  (required)
        :type slice: str
        :param slice_specifier: slice value (smtp.com, sender1) (required)
        :type slice_specifier: str
        :param group_by: Define a grouping:  * `channel` - optionally to be followed by a channel ID or name specifier  * `domain`  - optionally to be followed by a registered domain name  * `rcpt_domain` - optionally to be followed by a registered domain name  * `rcpt_isp` - optionally to be followed by a registered domain name  (required)
        :type group_by: str
        :param limit: Maximum number of items to return. (required)
        :type limit: int
        :param offset: Number of items to skip before returning the results. (required)
        :type offset: int
        :param end: The ending time. If not specified, defaults to now. RFC 2822 or UNIX epoch format.
        :type end: str
        :param event: Array of any event names for which stats has been requested.
        :type event: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'start',
            'duration',
            'slice',
            'slice_specifier',
            'group_by',
            'limit',
            'offset',
            'end',
            'event'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_stats_duration_slice_slice_specifier_group_by_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'start' is set
        if self.api_client.client_side_validation and ('start' not in local_var_params or  # noqa: E501
                                                        local_var_params['start'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`")  # noqa: E501
        # verify the required parameter 'duration' is set
        if self.api_client.client_side_validation and ('duration' not in local_var_params or  # noqa: E501
                                                        local_var_params['duration'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `duration` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`")  # noqa: E501
        # verify the required parameter 'slice' is set
        if self.api_client.client_side_validation and ('slice' not in local_var_params or  # noqa: E501
                                                        local_var_params['slice'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `slice` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`")  # noqa: E501
        # verify the required parameter 'slice_specifier' is set
        if self.api_client.client_side_validation and ('slice_specifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['slice_specifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `slice_specifier` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`")  # noqa: E501
        # verify the required parameter 'group_by' is set
        if self.api_client.client_side_validation and ('group_by' not in local_var_params or  # noqa: E501
                                                        local_var_params['group_by'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `group_by` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if self.api_client.client_side_validation and ('limit' not in local_var_params or  # noqa: E501
                                                        local_var_params['limit'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `limit` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if self.api_client.client_side_validation and ('offset' not in local_var_params or  # noqa: E501
                                                        local_var_params['offset'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `offset` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`")  # noqa: E501

        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] > 1000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `v4_stats_duration_slice_slice_specifier_group_by_get`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'duration' in local_var_params:
            path_params['duration'] = local_var_params['duration']  # noqa: E501
        if 'slice' in local_var_params:
            path_params['slice'] = local_var_params['slice']  # noqa: E501
        if 'slice_specifier' in local_var_params:
            path_params['slice_specifier'] = local_var_params['slice_specifier']  # noqa: E501
        if 'group_by' in local_var_params:
            path_params['group_by'] = local_var_params['group_by']  # noqa: E501

        query_params = []
        if 'start' in local_var_params and local_var_params['start'] is not None:  # noqa: E501
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'end' in local_var_params and local_var_params['end'] is not None:  # noqa: E501
            query_params.append(('end', local_var_params['end']))  # noqa: E501
        if 'event' in local_var_params and local_var_params['event'] is not None:  # noqa: E501
            query_params.append(('event', local_var_params['event']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiID', 'apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v4/stats/{duration}/{slice}/{slice_specifier}/{group_by}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
